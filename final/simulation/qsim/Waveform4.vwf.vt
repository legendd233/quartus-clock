// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/15/2022 16:10:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    final
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module final_vlg_sample_tst(
	second2,
	siwtch,
	switch,
	sampler_tx
);
input  second2;
input [0:0] siwtch;
input [1:1] switch;
output sampler_tx;

reg sample;
time current_time;
always @(second2 or siwtch or switch)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module final_vlg_check_tst (
	beep,
	dtube_cs_n,
	dtube_data,
	sampler_rx
);
input  beep;
input [3:0] dtube_cs_n;
input [6:0] dtube_data;
input sampler_rx;

reg  beep_expected;
reg [3:0] dtube_cs_n_expected;
reg [6:0] dtube_data_expected;

reg  beep_prev;
reg [3:0] dtube_cs_n_prev;
reg [6:0] dtube_data_prev;

reg  beep_expected_prev;
reg [3:0] dtube_cs_n_expected_prev;
reg [6:0] dtube_data_expected_prev;

reg  last_beep_exp;
reg [3:0] last_dtube_cs_n_exp;
reg [6:0] last_dtube_data_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	beep_prev = beep;
	dtube_cs_n_prev = dtube_cs_n;
	dtube_data_prev = dtube_data;
end

// update expected /o prevs

always @(trigger)
begin
	beep_expected_prev = beep_expected;
	dtube_cs_n_expected_prev = dtube_cs_n_expected;
	dtube_data_expected_prev = dtube_data_expected;
end



// expected beep
initial
begin
	beep_expected = 1'bX;
end 
// expected dtube_cs_n[ 3 ]
initial
begin
	dtube_cs_n_expected[3] = 1'bX;
end 
// expected dtube_cs_n[ 2 ]
initial
begin
	dtube_cs_n_expected[2] = 1'bX;
end 
// expected dtube_cs_n[ 1 ]
initial
begin
	dtube_cs_n_expected[1] = 1'bX;
end 
// expected dtube_cs_n[ 0 ]
initial
begin
	dtube_cs_n_expected[0] = 1'bX;
end 

// expected dtube_data[6]
initial
begin
	dtube_data_expected[6] = 1'bX;
end 

// expected dtube_data[5]
initial
begin
	dtube_data_expected[5] = 1'bX;
end 

// expected dtube_data[4]
initial
begin
	dtube_data_expected[4] = 1'bX;
end 

// expected dtube_data[3]
initial
begin
	dtube_data_expected[3] = 1'bX;
end 

// expected dtube_data[2]
initial
begin
	dtube_data_expected[2] = 1'bX;
end 

// expected dtube_data[1]
initial
begin
	dtube_data_expected[1] = 1'bX;
end 

// expected dtube_data[0]
initial
begin
	dtube_data_expected[0] = 1'bX;
end 
// generate trigger
always @(beep_expected or beep or dtube_cs_n_expected or dtube_cs_n or dtube_data_expected or dtube_data)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected beep = %b | expected dtube_cs_n = %b | expected dtube_data = %b | ",beep_expected_prev,dtube_cs_n_expected_prev,dtube_data_expected_prev);
	$display("| real beep = %b | real dtube_cs_n = %b | real dtube_data = %b | ",beep_prev,dtube_cs_n_prev,dtube_data_prev);
`endif
	if (
		( beep_expected_prev !== 1'bx ) && ( beep_prev !== beep_expected_prev )
		&& ((beep_expected_prev !== last_beep_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port beep :: @time = %t",  $realtime);
		$display ("     Expected value = %b", beep_expected_prev);
		$display ("     Real value = %b", beep_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_beep_exp = beep_expected_prev;
	end
	if (
		( dtube_cs_n_expected_prev[0] !== 1'bx ) && ( dtube_cs_n_prev[0] !== dtube_cs_n_expected_prev[0] )
		&& ((dtube_cs_n_expected_prev[0] !== last_dtube_cs_n_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dtube_cs_n[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dtube_cs_n_expected_prev);
		$display ("     Real value = %b", dtube_cs_n_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dtube_cs_n_exp[0] = dtube_cs_n_expected_prev[0];
	end
	if (
		( dtube_cs_n_expected_prev[1] !== 1'bx ) && ( dtube_cs_n_prev[1] !== dtube_cs_n_expected_prev[1] )
		&& ((dtube_cs_n_expected_prev[1] !== last_dtube_cs_n_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dtube_cs_n[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dtube_cs_n_expected_prev);
		$display ("     Real value = %b", dtube_cs_n_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dtube_cs_n_exp[1] = dtube_cs_n_expected_prev[1];
	end
	if (
		( dtube_cs_n_expected_prev[2] !== 1'bx ) && ( dtube_cs_n_prev[2] !== dtube_cs_n_expected_prev[2] )
		&& ((dtube_cs_n_expected_prev[2] !== last_dtube_cs_n_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dtube_cs_n[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dtube_cs_n_expected_prev);
		$display ("     Real value = %b", dtube_cs_n_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dtube_cs_n_exp[2] = dtube_cs_n_expected_prev[2];
	end
	if (
		( dtube_cs_n_expected_prev[3] !== 1'bx ) && ( dtube_cs_n_prev[3] !== dtube_cs_n_expected_prev[3] )
		&& ((dtube_cs_n_expected_prev[3] !== last_dtube_cs_n_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dtube_cs_n[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dtube_cs_n_expected_prev);
		$display ("     Real value = %b", dtube_cs_n_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dtube_cs_n_exp[3] = dtube_cs_n_expected_prev[3];
	end
	if (
		( dtube_data_expected_prev[0] !== 1'bx ) && ( dtube_data_prev[0] !== dtube_data_expected_prev[0] )
		&& ((dtube_data_expected_prev[0] !== last_dtube_data_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dtube_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dtube_data_expected_prev);
		$display ("     Real value = %b", dtube_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dtube_data_exp[0] = dtube_data_expected_prev[0];
	end
	if (
		( dtube_data_expected_prev[1] !== 1'bx ) && ( dtube_data_prev[1] !== dtube_data_expected_prev[1] )
		&& ((dtube_data_expected_prev[1] !== last_dtube_data_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dtube_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dtube_data_expected_prev);
		$display ("     Real value = %b", dtube_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dtube_data_exp[1] = dtube_data_expected_prev[1];
	end
	if (
		( dtube_data_expected_prev[2] !== 1'bx ) && ( dtube_data_prev[2] !== dtube_data_expected_prev[2] )
		&& ((dtube_data_expected_prev[2] !== last_dtube_data_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dtube_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dtube_data_expected_prev);
		$display ("     Real value = %b", dtube_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dtube_data_exp[2] = dtube_data_expected_prev[2];
	end
	if (
		( dtube_data_expected_prev[3] !== 1'bx ) && ( dtube_data_prev[3] !== dtube_data_expected_prev[3] )
		&& ((dtube_data_expected_prev[3] !== last_dtube_data_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dtube_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dtube_data_expected_prev);
		$display ("     Real value = %b", dtube_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dtube_data_exp[3] = dtube_data_expected_prev[3];
	end
	if (
		( dtube_data_expected_prev[4] !== 1'bx ) && ( dtube_data_prev[4] !== dtube_data_expected_prev[4] )
		&& ((dtube_data_expected_prev[4] !== last_dtube_data_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dtube_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dtube_data_expected_prev);
		$display ("     Real value = %b", dtube_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dtube_data_exp[4] = dtube_data_expected_prev[4];
	end
	if (
		( dtube_data_expected_prev[5] !== 1'bx ) && ( dtube_data_prev[5] !== dtube_data_expected_prev[5] )
		&& ((dtube_data_expected_prev[5] !== last_dtube_data_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dtube_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dtube_data_expected_prev);
		$display ("     Real value = %b", dtube_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dtube_data_exp[5] = dtube_data_expected_prev[5];
	end
	if (
		( dtube_data_expected_prev[6] !== 1'bx ) && ( dtube_data_prev[6] !== dtube_data_expected_prev[6] )
		&& ((dtube_data_expected_prev[6] !== last_dtube_data_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dtube_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dtube_data_expected_prev);
		$display ("     Real value = %b", dtube_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dtube_data_exp[6] = dtube_data_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module final_vlg_vec_tst();
// constants                                           
// general purpose registers
reg second2;
reg [0:0] siwtch;
reg [1:1] switch;
// wires                                               
wire beep;
wire [3:0] dtube_cs_n;
wire [6:0] dtube_data;

wire sampler;                             

// assign statements (if any)                          
final i1 (
// port map - connection between master ports and signals/registers   
	.beep(beep),
	.dtube_cs_n(dtube_cs_n),
	.dtube_data(dtube_data),
	.second2(second2),
	.siwtch(siwtch),
	.switch(switch)
);

// second2
always
begin
	second2 = 1'b0;
	second2 = #10000 1'b1;
	#10000;
end 

// siwtch
initial
begin
	siwtch[0] = 1'b0;
end 

// siwtch[0]
initial
begin
	siwtch[0] = 1'b0;
end 

// switch
initial
begin
	switch = 1'b0;
end 

// switch[1]
initial
begin
	switch[1] = 1'b0;
end 

final_vlg_sample_tst tb_sample (
	.second2(second2),
	.siwtch(siwtch),
	.switch(switch),
	.sampler_tx(sampler)
);

final_vlg_check_tst tb_out(
	.beep(beep),
	.dtube_cs_n(dtube_cs_n),
	.dtube_data(dtube_data),
	.sampler_rx(sampler)
);
endmodule

